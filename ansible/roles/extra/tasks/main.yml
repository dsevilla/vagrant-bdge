---
- name: Download and extract Pig
  unarchive: src='http://apache.rediris.es/pig/pig-{{pig_version}}/{{pig_archive}}'
             dest='/home/vagrant'
             creates='{{ pig_home_dir }}'
             copy=no

- name: write Pig start shell script
  template: src=start-pig.sh.j2
            dest='{{ ansible_env.HOME }}/start-pig.sh'
            mode=0755

- name: link pig directory to an easier name
  file: src='{{ pig_home_dir }}'
        dest='{{ ansible_env.HOME }}/pig'
        state=link

# - name: Download and extract Spark
#   unarchive: src='http://ftp.cixug.es/apache/spark/spark-{{spark_version}}/{{spark_archive}}'
#              dest='{{ansible_env.HOME}}'
#              creates='{{ spark_home_dir }}'
#              copy=no

- name: check if Spark is present already
  stat: path='{{ ansible_env.HOME }}/spark'
  register: spark_present

- name: download Spark release {{ spark_version }}
  get_url: url="http://ftp.rediris.es/mirror/Apache/spark/spark-{{spark_version}}/{{spark_archive}}"
           dest="{{ ansible_env.HOME }}/{{ spark_archive }}"
  when: spark_present.stat.exists == False

- name: extract Spark archive
  command: tar xzf "{{ ansible_env.HOME }}/{{ spark_archive }}"
           chdir='{{ ansible_env.HOME }}'
           creates='{{ spark_home_dir }}'
  when: spark_present.stat.exists == False

- name: symlink Spark home directory to just spark/
  file: path='{{ ansible_env.HOME }}/spark'
        src='{{ spark_home_dir }}'
        state=link
  when: spark_present.stat.exists == False

- name: delete the downloaded spark tar file
  file: path='{{ ansible_env.HOME }}/{{ spark_archive }}' state=absent
  when: spark_present.stat.exists == False

- name: write Spark start shell script
  template: src=start-spark.sh.j2
            dest='{{ ansible_env.HOME }}/start-spark.sh'
            mode=0755

- name: install mongodb
  apt: pkg=mongodb state=present
  become: yes
  become_user: root

- name: configure mongodb for outside vm access
  lineinfile: dest=/etc/mongodb.conf
              regexp='^bind_ip.*'
              line='bind_ip = 0.0.0.0'
              backrefs=no
              state=present
  become: yes
  become_user: root

- name: stop mongodb service
  service: name=mongodb state=stopped
  become: yes
  become_user: root

- name: download and extract Neo4j
  unarchive: src='{{neo4j_url}}'
             dest='{{ansible_env.HOME}}'
             creates='{{neo4j_home_dir}}'
             copy=no

- name: link neo4j directory to an easier name
  file: src='{{ neo4j_home_dir }}'
        dest='{{ ansible_env.HOME }}/neo4j'
        state=link

- name: configure neo4j for outside vm access
  lineinfile:
    dest: '{{neo4j_home_dir}}/conf/neo4j.conf'
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: no
    state: present
  with_items:
    - { regexp: '^#dbms.shell.host=.*', line: 'dbms.shell.host=0.0.0.0' }
    - { regexp: '^#dbms.shell.enabled=.*', line: 'dbms.shell.enabled=true' }

- name: Set some kernel parameters for neo4j
  lineinfile:
    dest: /etc/security/limits.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: no
    state: present
  with_items:
    - { regexp: '^vagrant soft nofile', line: 'vagrant soft nofile 40000' }
    - { regexp: '^vagrant hard nofile', line: 'vagrant hard nofile 40000' }
  become: yes
  become_user: root

- name: write Neo4j start shell script
  template: src=start-neo4j.sh.j2
            dest='{{ ansible_env.HOME }}/start-neo4j.sh'
            mode=0755

- name: prepare MySQL environment
  shell: 'echo "mysql-server mysql-server/{{item}} password root" | debconf-set-selections'
  with_items:
    - root_password
    - root_password_again
  become: yes
  become_user: root

- name: install mysql server
  apt: pkg=mysql-server state=present force=yes
  become: yes
  become_user: root

- name: check if mysql server is running to inject the initial configuration
  shell: service mysql status
  register: _mysql_running
  ignore_errors: yes

- name: permissions for mysql user the first time
  shell: mysql -u root -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION; FLUSH PRIVILEGES;"
  when: "_mysql_running.rc == 0"

- name: stop mysql service if started in installation
  service: name=mysql state=stopped enabled=no
  become: yes
  become_user: root

# - name: Download and extract Zeppelin
#   unarchive: src='{{zeppelin_url}}'
#              dest='{{ansible_env.HOME}}'
#              creates='{{ zeppelin_home_dir }}'
#              copy=no

# - name: check if Zeppelin is present already
#   stat: path='{{ ansible_env.HOME }}/zeppelin'
#   register: zeppelin_present

# - name: download Zeppelin release {{ zeppelin_version }}
#   get_url: url="{{zeppelin_url}}"
#            dest="{{ ansible_env.HOME }}/{{ zeppelin_archive }}"
#   when: zeppelin_present.stat.exists == False

# - name: extract Zeppelin archive
#   command: tar xzf "{{ ansible_env.HOME }}/{{ zeppelin_archive }}"
#            chdir='{{ ansible_env.HOME }}'
#            creates='{{ zeppelin_home_dir }}'
#   when: zeppelin_present.stat.exists == False

# - name: symlink Zeppelin home directory to just zeppelin/
#   file: path='{{ ansible_env.HOME }}/zeppelin'
#         src='{{ zeppelin_home_dir }}'
#         state=link
#   when: zeppelin_present.stat.exists == False

# - name: delete the downloaded zeppelin tar file
#   file: path='{{ ansible_env.HOME }}/{{ zeppelin_archive }}' state=absent
#   when: zeppelin_present.stat.exists == False

# - name: write Zeppelin start shell script
#   template: src=start-zeppelin.sh.j2
#             dest='{{ ansible_env.HOME }}/start-zeppelin.sh'
#             mode=0755

# - name: Download and extract Hive
#   unarchive: src='{{hive_url}}'
#              dest='{{ansible_env.HOME}}'
#              creates='{{ hive_home_dir }}'
#              copy=no

- name: check if Hive is present already
  stat: path='{{ ansible_env.HOME }}/hive'
  register: hive_present

- name: download Hive release {{ hive_version }}
  get_url: url="{{hive_url}}"
           dest="{{ ansible_env.HOME }}/{{ hive_archive }}"
  when: hive_present.stat.exists == False

- name: extract Hive archive
  command: tar xzf "{{ ansible_env.HOME }}/{{ hive_archive }}"
           chdir='{{ ansible_env.HOME }}'
           creates='{{ hive_home_dir }}'
  when: hive_present.stat.exists == False

- name: delete the downloaded hive tar file
  file: path='{{ ansible_env.HOME }}/{{ hive_archive }}' state=absent
  when: hive_present.stat.exists == False

- name: symlink Hive home directory to just hive/
  file: path='{{ ansible_env.HOME }}/hive'
        src='{{ hive_home_dir }}'
        state=link
  when: hive_present.stat.exists == False

- name: write Hive start shell script
  template: src=start-hive.sh.j2
            dest='{{ ansible_env.HOME }}/start-hive.sh'
            mode=0755
